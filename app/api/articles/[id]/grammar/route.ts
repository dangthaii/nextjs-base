import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "@/utils/auth";
import { prisma } from "@/lib/prisma";
import { createGeminiStream } from "@/lib/gemini";

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession();
    const userId = session?.user?.id;

    if (!userId) {
      return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
    }

    const { id } = await params;
    const articleId = id;
    const body = await request.json();
    const { selectedText, paragraphContent } = body;

    if (!selectedText || !paragraphContent) {
      return NextResponse.json(
        { message: "Selected text and paragraph content are required" },
        { status: 400 }
      );
    }

    // Verify the article exists and user has access to it
    const article = await prisma.article.findUnique({
      where: { id: articleId },
    });

    if (!article) {
      return NextResponse.json(
        { message: "Article not found" },
        { status: 404 }
      );
    }

    // Check if the article belongs to the user or has public access
    const hasAccess =
      article.authorId === userId ||
      (article as any).isPublic ||
      (article as any).sharedWithUserIds?.includes(userId);

    if (!hasAccess) {
      return NextResponse.json(
        { message: "You don't have access to this article" },
        { status: 403 }
      );
    }

    // Create the prompt for grammar analysis
    const prompt = `
Ph√¢n t√≠ch ng·ªØ ph√°p ti·∫øng Anh cho ph·∫ßn vƒÉn b·∫£n ƒë∆∞·ª£c ch·ªçn: "${selectedText}".

B·ªëi c·∫£nh c·ªßa vƒÉn b·∫£n:
"${paragraphContent}"

H√£y ph√¢n t√≠ch ng·ªØ ph√°p b·∫±ng ti·∫øng Vi·ªát v·ªõi:

üìö **Ph√¢n t√≠ch c·∫•u tr√∫c ng·ªØ ph√°p:**
- X√°c ƒë·ªãnh c√°c th√†nh ph·∫ßn ch√≠nh (ch·ªß ng·ªØ, v·ªã ng·ªØ, b·ªï ng·ªØ...)
- Lo·∫°i c√¢u v√† c·∫•u tr√∫c c√¢u
- Th√¨, th·ªÉ, c√°ch c·ªßa ƒë·ªông t·ª´ (n·∫øu c√≥)

‚ú® **Gi·∫£i th√≠ch chi ti·∫øt:**
- T·∫°i sao s·ª≠ d·ª•ng c·∫•u tr√∫c n√†y?
- √ù nghƒ©a v√† c√°ch d√πng c·ªßa c√°c t·ª´ ng·ªØ ph√°p
- Quy t·∫Øc ng·ªØ ph√°p √°p d·ª•ng

üéØ **V√≠ d·ª• t∆∞∆°ng t·ª±:**
- ƒê∆∞a ra 1-2 v√≠ d·ª• c√≥ c·∫•u tr√∫c t∆∞∆°ng t·ª±
- So s√°nh v·ªõi ti·∫øng Vi·ªát (n·∫øu th√≠ch h·ª£p)

Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, s·ª≠ d·ª•ng emoji cho sinh ƒë·ªông, c√≥ sense of humor nh·∫π nh√†ng nh∆∞ng v·∫´n gi√°o d·ª•c. D√πng markdown ƒë·ªÉ format ƒë·∫πp v·ªõi bullet points.
    `;

    // Use the streaming utility
    const stream = await createGeminiStream(prompt, {
      model: "gemini-2.5-flash",
    });

    return new Response(stream, {
      headers: {
        "Content-Type": "application/x-ndjson",
        "Cache-Control": "no-cache",
      },
    });
  } catch (error: any) {
    console.error("Error in streaming grammar analysis:", error);
    return NextResponse.json(
      { message: "Failed to generate grammar analysis" },
      { status: 500 }
    );
  }
}
